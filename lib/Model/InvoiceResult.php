<?php
/**
 * InvoiceResult
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Mtn\Momo\Collection
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Collection
 *
 * Enable remote collection of bills, fees or taxes
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Mtn\Momo\Collection\Model;

use \ArrayAccess;
use \Mtn\Momo\Collection\ObjectSerializer;

/**
 * InvoiceResult Class Doc Comment
 *
 * @category Class
 * @package  Mtn\Momo\Collection
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InvoiceResult implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InvoiceResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'reference_id' => 'string',
        'external_id' => 'string',
        'amount' => 'string',
        'currency' => 'string',
        'status' => 'string',
        'payment_reference' => 'string',
        'invoice_id' => 'string',
        'expiry_date_time' => 'string',
        'payee_first_name' => 'string',
        'payee_last_name' => 'string',
        'error_reason' => '\Mtn\Momo\Collection\Model\ErrorReason',
        'intended_payer' => '\Mtn\Momo\Collection\Model\Party',
        'description' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'reference_id' => null,
        'external_id' => null,
        'amount' => null,
        'currency' => null,
        'status' => null,
        'payment_reference' => null,
        'invoice_id' => null,
        'expiry_date_time' => null,
        'payee_first_name' => null,
        'payee_last_name' => null,
        'error_reason' => null,
        'intended_payer' => null,
        'description' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'reference_id' => false,
        'external_id' => false,
        'amount' => false,
        'currency' => false,
        'status' => false,
        'payment_reference' => false,
        'invoice_id' => false,
        'expiry_date_time' => false,
        'payee_first_name' => false,
        'payee_last_name' => false,
        'error_reason' => false,
        'intended_payer' => false,
        'description' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'reference_id' => 'referenceId',
        'external_id' => 'externalId',
        'amount' => 'amount',
        'currency' => 'currency',
        'status' => 'status',
        'payment_reference' => 'paymentReference',
        'invoice_id' => 'invoiceId',
        'expiry_date_time' => 'expiryDateTime',
        'payee_first_name' => 'payeeFirstName',
        'payee_last_name' => 'payeeLastName',
        'error_reason' => 'errorReason',
        'intended_payer' => 'intendedPayer',
        'description' => 'description'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'reference_id' => 'setReferenceId',
        'external_id' => 'setExternalId',
        'amount' => 'setAmount',
        'currency' => 'setCurrency',
        'status' => 'setStatus',
        'payment_reference' => 'setPaymentReference',
        'invoice_id' => 'setInvoiceId',
        'expiry_date_time' => 'setExpiryDateTime',
        'payee_first_name' => 'setPayeeFirstName',
        'payee_last_name' => 'setPayeeLastName',
        'error_reason' => 'setErrorReason',
        'intended_payer' => 'setIntendedPayer',
        'description' => 'setDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'reference_id' => 'getReferenceId',
        'external_id' => 'getExternalId',
        'amount' => 'getAmount',
        'currency' => 'getCurrency',
        'status' => 'getStatus',
        'payment_reference' => 'getPaymentReference',
        'invoice_id' => 'getInvoiceId',
        'expiry_date_time' => 'getExpiryDateTime',
        'payee_first_name' => 'getPayeeFirstName',
        'payee_last_name' => 'getPayeeLastName',
        'error_reason' => 'getErrorReason',
        'intended_payer' => 'getIntendedPayer',
        'description' => 'getDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_CREATED = 'CREATED';
    public const STATUS_PENDING = 'PENDING';
    public const STATUS_SUCCESSFUL = 'SUCCESSFUL';
    public const STATUS_FAILED = 'FAILED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_CREATED,
            self::STATUS_PENDING,
            self::STATUS_SUCCESSFUL,
            self::STATUS_FAILED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('reference_id', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('payment_reference', $data ?? [], null);
        $this->setIfExists('invoice_id', $data ?? [], null);
        $this->setIfExists('expiry_date_time', $data ?? [], null);
        $this->setIfExists('payee_first_name', $data ?? [], null);
        $this->setIfExists('payee_last_name', $data ?? [], null);
        $this->setIfExists('error_reason', $data ?? [], null);
        $this->setIfExists('intended_payer', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets reference_id
     *
     * @return string|null
     */
    public function getReferenceId()
    {
        return $this->container['reference_id'];
    }

    /**
     * Sets reference_id
     *
     * @param string|null $reference_id The reference id for this invoice.
     *
     * @return self
     */
    public function setReferenceId($reference_id)
    {
        if (is_null($reference_id)) {
            throw new \InvalidArgumentException('non-nullable reference_id cannot be null');
        }
        $this->container['reference_id'] = $reference_id;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id An external transaction id to tie to the payment.
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        if (is_null($external_id)) {
            throw new \InvalidArgumentException('non-nullable external_id cannot be null');
        }
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string|null $amount A positive amount for this invoice.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency ISO4217 Currency - The currency used in this invoice.
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets payment_reference
     *
     * @return string|null
     */
    public function getPaymentReference()
    {
        return $this->container['payment_reference'];
    }

    /**
     * Sets payment_reference
     *
     * @param string|null $payment_reference A unique id that identifies a pending invoice.
     *
     * @return self
     */
    public function setPaymentReference($payment_reference)
    {
        if (is_null($payment_reference)) {
            throw new \InvalidArgumentException('non-nullable payment_reference cannot be null');
        }
        $this->container['payment_reference'] = $payment_reference;

        return $this;
    }

    /**
     * Gets invoice_id
     *
     * @return string|null
     */
    public function getInvoiceId()
    {
        return $this->container['invoice_id'];
    }

    /**
     * Sets invoice_id
     *
     * @param string|null $invoice_id An id for the invoice.
     *
     * @return self
     */
    public function setInvoiceId($invoice_id)
    {
        if (is_null($invoice_id)) {
            throw new \InvalidArgumentException('non-nullable invoice_id cannot be null');
        }
        $this->container['invoice_id'] = $invoice_id;

        return $this;
    }

    /**
     * Gets expiry_date_time
     *
     * @return string|null
     */
    public function getExpiryDateTime()
    {
        return $this->container['expiry_date_time'];
    }

    /**
     * Sets expiry_date_time
     *
     * @param string|null $expiry_date_time DateTime for when invoice expires, in YYYY-MM-DD:THH:mm:ss format.
     *
     * @return self
     */
    public function setExpiryDateTime($expiry_date_time)
    {
        if (is_null($expiry_date_time)) {
            throw new \InvalidArgumentException('non-nullable expiry_date_time cannot be null');
        }
        $this->container['expiry_date_time'] = $expiry_date_time;

        return $this;
    }

    /**
     * Gets payee_first_name
     *
     * @return string|null
     */
    public function getPayeeFirstName()
    {
        return $this->container['payee_first_name'];
    }

    /**
     * Sets payee_first_name
     *
     * @param string|null $payee_first_name First name of the payee in this invoice.
     *
     * @return self
     */
    public function setPayeeFirstName($payee_first_name)
    {
        if (is_null($payee_first_name)) {
            throw new \InvalidArgumentException('non-nullable payee_first_name cannot be null');
        }
        $this->container['payee_first_name'] = $payee_first_name;

        return $this;
    }

    /**
     * Gets payee_last_name
     *
     * @return string|null
     */
    public function getPayeeLastName()
    {
        return $this->container['payee_last_name'];
    }

    /**
     * Sets payee_last_name
     *
     * @param string|null $payee_last_name Surname of the payee in this invoice
     *
     * @return self
     */
    public function setPayeeLastName($payee_last_name)
    {
        if (is_null($payee_last_name)) {
            throw new \InvalidArgumentException('non-nullable payee_last_name cannot be null');
        }
        $this->container['payee_last_name'] = $payee_last_name;

        return $this;
    }

    /**
     * Gets error_reason
     *
     * @return \Mtn\Momo\Collection\Model\ErrorReason|null
     */
    public function getErrorReason()
    {
        return $this->container['error_reason'];
    }

    /**
     * Sets error_reason
     *
     * @param \Mtn\Momo\Collection\Model\ErrorReason|null $error_reason error_reason
     *
     * @return self
     */
    public function setErrorReason($error_reason)
    {
        if (is_null($error_reason)) {
            throw new \InvalidArgumentException('non-nullable error_reason cannot be null');
        }
        $this->container['error_reason'] = $error_reason;

        return $this;
    }

    /**
     * Gets intended_payer
     *
     * @return \Mtn\Momo\Collection\Model\Party|null
     */
    public function getIntendedPayer()
    {
        return $this->container['intended_payer'];
    }

    /**
     * Sets intended_payer
     *
     * @param \Mtn\Momo\Collection\Model\Party|null $intended_payer intended_payer
     *
     * @return self
     */
    public function setIntendedPayer($intended_payer)
    {
        if (is_null($intended_payer)) {
            throw new \InvalidArgumentException('non-nullable intended_payer cannot be null');
        }
        $this->container['intended_payer'] = $intended_payer;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description An optional description of the invoice.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


