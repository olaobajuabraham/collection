<?php
/**
 * CreatePayments
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Mtn\Momo\Collection
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Collection
 *
 * Enable remote collection of bills, fees or taxes
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Mtn\Momo\Collection\Model;

use \ArrayAccess;
use \Mtn\Momo\Collection\ObjectSerializer;

/**
 * CreatePayments Class Doc Comment
 *
 * @category Class
 * @package  Mtn\Momo\Collection
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreatePayments implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreatePayments';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'external_transaction_id' => 'string',
        'money' => '\Mtn\Momo\Collection\Model\Money',
        'customer_reference' => 'string',
        'service_provider_user_name' => 'string',
        'coupon_id' => 'string',
        'product_id' => 'string',
        'product_offering_id' => 'string',
        'receiver_message' => 'string',
        'sender_note' => 'string',
        'max_number_of_retries' => 'int',
        'include_sender_charges' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'external_transaction_id' => null,
        'money' => null,
        'customer_reference' => null,
        'service_provider_user_name' => null,
        'coupon_id' => null,
        'product_id' => null,
        'product_offering_id' => null,
        'receiver_message' => null,
        'sender_note' => null,
        'max_number_of_retries' => null,
        'include_sender_charges' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'external_transaction_id' => false,
        'money' => false,
        'customer_reference' => false,
        'service_provider_user_name' => false,
        'coupon_id' => false,
        'product_id' => false,
        'product_offering_id' => false,
        'receiver_message' => false,
        'sender_note' => false,
        'max_number_of_retries' => false,
        'include_sender_charges' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'external_transaction_id' => 'externalTransactionId',
        'money' => 'money',
        'customer_reference' => 'customerReference',
        'service_provider_user_name' => 'serviceProviderUserName',
        'coupon_id' => 'couponId',
        'product_id' => 'productId',
        'product_offering_id' => 'productOfferingId',
        'receiver_message' => 'receiverMessage',
        'sender_note' => 'senderNote',
        'max_number_of_retries' => 'maxNumberOfRetries',
        'include_sender_charges' => 'includeSenderCharges'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'external_transaction_id' => 'setExternalTransactionId',
        'money' => 'setMoney',
        'customer_reference' => 'setCustomerReference',
        'service_provider_user_name' => 'setServiceProviderUserName',
        'coupon_id' => 'setCouponId',
        'product_id' => 'setProductId',
        'product_offering_id' => 'setProductOfferingId',
        'receiver_message' => 'setReceiverMessage',
        'sender_note' => 'setSenderNote',
        'max_number_of_retries' => 'setMaxNumberOfRetries',
        'include_sender_charges' => 'setIncludeSenderCharges'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'external_transaction_id' => 'getExternalTransactionId',
        'money' => 'getMoney',
        'customer_reference' => 'getCustomerReference',
        'service_provider_user_name' => 'getServiceProviderUserName',
        'coupon_id' => 'getCouponId',
        'product_id' => 'getProductId',
        'product_offering_id' => 'getProductOfferingId',
        'receiver_message' => 'getReceiverMessage',
        'sender_note' => 'getSenderNote',
        'max_number_of_retries' => 'getMaxNumberOfRetries',
        'include_sender_charges' => 'getIncludeSenderCharges'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('external_transaction_id', $data ?? [], null);
        $this->setIfExists('money', $data ?? [], null);
        $this->setIfExists('customer_reference', $data ?? [], null);
        $this->setIfExists('service_provider_user_name', $data ?? [], null);
        $this->setIfExists('coupon_id', $data ?? [], null);
        $this->setIfExists('product_id', $data ?? [], null);
        $this->setIfExists('product_offering_id', $data ?? [], null);
        $this->setIfExists('receiver_message', $data ?? [], null);
        $this->setIfExists('sender_note', $data ?? [], null);
        $this->setIfExists('max_number_of_retries', $data ?? [], null);
        $this->setIfExists('include_sender_charges', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets external_transaction_id
     *
     * @return string|null
     */
    public function getExternalTransactionId()
    {
        return $this->container['external_transaction_id'];
    }

    /**
     * Sets external_transaction_id
     *
     * @param string|null $external_transaction_id An external transaction id to tie to the payment.
     *
     * @return self
     */
    public function setExternalTransactionId($external_transaction_id)
    {
        if (is_null($external_transaction_id)) {
            throw new \InvalidArgumentException('non-nullable external_transaction_id cannot be null');
        }
        $this->container['external_transaction_id'] = $external_transaction_id;

        return $this;
    }

    /**
     * Gets money
     *
     * @return \Mtn\Momo\Collection\Model\Money|null
     */
    public function getMoney()
    {
        return $this->container['money'];
    }

    /**
     * Sets money
     *
     * @param \Mtn\Momo\Collection\Model\Money|null $money money
     *
     * @return self
     */
    public function setMoney($money)
    {
        if (is_null($money)) {
            throw new \InvalidArgumentException('non-nullable money cannot be null');
        }
        $this->container['money'] = $money;

        return $this;
    }

    /**
     * Gets customer_reference
     *
     * @return string|null
     */
    public function getCustomerReference()
    {
        return $this->container['customer_reference'];
    }

    /**
     * Sets customer_reference
     *
     * @param string|null $customer_reference A customer reference for a provider. Example: +46070911111
     *
     * @return self
     */
    public function setCustomerReference($customer_reference)
    {
        if (is_null($customer_reference)) {
            throw new \InvalidArgumentException('non-nullable customer_reference cannot be null');
        }
        $this->container['customer_reference'] = $customer_reference;

        return $this;
    }

    /**
     * Gets service_provider_user_name
     *
     * @return string|null
     */
    public function getServiceProviderUserName()
    {
        return $this->container['service_provider_user_name'];
    }

    /**
     * Sets service_provider_user_name
     *
     * @param string|null $service_provider_user_name A service provider name. Example: Electricity Inc.
     *
     * @return self
     */
    public function setServiceProviderUserName($service_provider_user_name)
    {
        if (is_null($service_provider_user_name)) {
            throw new \InvalidArgumentException('non-nullable service_provider_user_name cannot be null');
        }
        $this->container['service_provider_user_name'] = $service_provider_user_name;

        return $this;
    }

    /**
     * Gets coupon_id
     *
     * @return string|null
     */
    public function getCouponId()
    {
        return $this->container['coupon_id'];
    }

    /**
     * Sets coupon_id
     *
     * @param string|null $coupon_id A coupon the user would like to redeem and use the reward as part of this payment.
     *
     * @return self
     */
    public function setCouponId($coupon_id)
    {
        if (is_null($coupon_id)) {
            throw new \InvalidArgumentException('non-nullable coupon_id cannot be null');
        }
        $this->container['coupon_id'] = $coupon_id;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return string|null
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param string|null $product_id Optional id of a product, used if paying for a product.
     *
     * @return self
     */
    public function setProductId($product_id)
    {
        if (is_null($product_id)) {
            throw new \InvalidArgumentException('non-nullable product_id cannot be null');
        }
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets product_offering_id
     *
     * @return string|null
     */
    public function getProductOfferingId()
    {
        return $this->container['product_offering_id'];
    }

    /**
     * Sets product_offering_id
     *
     * @param string|null $product_offering_id Optional id of a product offering, used when paying for a particular offering of a product.
     *
     * @return self
     */
    public function setProductOfferingId($product_offering_id)
    {
        if (is_null($product_offering_id)) {
            throw new \InvalidArgumentException('non-nullable product_offering_id cannot be null');
        }
        $this->container['product_offering_id'] = $product_offering_id;

        return $this;
    }

    /**
     * Gets receiver_message
     *
     * @return string|null
     */
    public function getReceiverMessage()
    {
        return $this->container['receiver_message'];
    }

    /**
     * Sets receiver_message
     *
     * @param string|null $receiver_message A descriptive note for receiver transaction history.
     *
     * @return self
     */
    public function setReceiverMessage($receiver_message)
    {
        if (is_null($receiver_message)) {
            throw new \InvalidArgumentException('non-nullable receiver_message cannot be null');
        }
        $this->container['receiver_message'] = $receiver_message;

        return $this;
    }

    /**
     * Gets sender_note
     *
     * @return string|null
     */
    public function getSenderNote()
    {
        return $this->container['sender_note'];
    }

    /**
     * Sets sender_note
     *
     * @param string|null $sender_note A descriptive note for sender transaction history.
     *
     * @return self
     */
    public function setSenderNote($sender_note)
    {
        if (is_null($sender_note)) {
            throw new \InvalidArgumentException('non-nullable sender_note cannot be null');
        }
        $this->container['sender_note'] = $sender_note;

        return $this;
    }

    /**
     * Gets max_number_of_retries
     *
     * @return int|null
     */
    public function getMaxNumberOfRetries()
    {
        return $this->container['max_number_of_retries'];
    }

    /**
     * Sets max_number_of_retries
     *
     * @param int|null $max_number_of_retries maxNumberOfRetries
     *
     * @return self
     */
    public function setMaxNumberOfRetries($max_number_of_retries)
    {
        if (is_null($max_number_of_retries)) {
            throw new \InvalidArgumentException('non-nullable max_number_of_retries cannot be null');
        }
        $this->container['max_number_of_retries'] = $max_number_of_retries;

        return $this;
    }

    /**
     * Gets include_sender_charges
     *
     * @return bool|null
     */
    public function getIncludeSenderCharges()
    {
        return $this->container['include_sender_charges'];
    }

    /**
     * Sets include_sender_charges
     *
     * @param bool|null $include_sender_charges Specifies if sender charges, this is, fee and tax paid by the sender, should be included in the specified transaction amount. This means that the charges will be deducted from the transaction amount before the remaining amount is transferred to the receiver.True indicates that charges shall be included in the specified transaction amount. The default value is false, meaning that sender charges are charged on top of the transaction amount.
     *
     * @return self
     */
    public function setIncludeSenderCharges($include_sender_charges)
    {
        if (is_null($include_sender_charges)) {
            throw new \InvalidArgumentException('non-nullable include_sender_charges cannot be null');
        }
        $this->container['include_sender_charges'] = $include_sender_charges;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


